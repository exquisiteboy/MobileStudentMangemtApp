package com.mycompany.myapp;


import com.codename1.charts.util.ColorUtil;
import com.codename1.db.Cursor;
import com.codename1.db.Database;
import com.codename1.db.Row;
import com.codename1.io.FileSystemStorage;
import com.codename1.io.Log;
import com.codename1.io.Util;
import com.codename1.ui.Display;
import com.codename1.ui.Form;
import com.codename1.ui.Dialog;
import com.codename1.ui.Label;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.ui.Button;
import com.codename1.ui.Command;
import com.codename1.ui.FontImage;
import com.codename1.ui.TextArea;
import com.codename1.ui.TextField;
import com.codename1.ui.Toolbar;
import com.codename1.ui.plaf.Border;
import com.codename1.ui.plaf.Style;
import com.codename1.ui.table.DefaultTableModel;
import com.codename1.ui.table.Table;
import com.codename1.ui.layouts.BorderLayout;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.ui.layouts.GridLayout;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;





/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose 
 * of building native mobile applications using Java.
 */
public class MyApplication {
 
    private Form current;
    private Resources theme;
   
  
    private Database db;
   
 public void showDatabase(){
  
      Style s = UIManager.getInstance().getComponentStyle("TitleCommand");
      FontImage icon = FontImage.createMaterial(FontImage.MATERIAL_QUERY_BUILDER, s);
      Form hi = new Form("SQL Explorer", new BorderLayout());
  

hi.getToolbar().addCommandToRightBar("", icon, (e) -> {
    TextArea query = new TextArea(3, 80);
    Command ok = new Command("Execute");
    Command cancel = new Command("Cancel");
    if(Dialog.show("Query", query, ok, cancel) == ok) {
        Database db = null;
        Cursor cur = null;
        try {
            
            db = Display.getInstance().openOrCreate("UserAccountsDB.db");
           if(query.getText().startsWith("select")) {
                cur = db.executeQuery(query.getText());
                int columns = cur.getColumnCount();
                hi.removeAll();
                if(columns > 0) {
                    boolean next = cur.next();
                    if(next) {
                        ArrayList<String[]> data = new ArrayList<>();
                        String[] columnNames = new String[columns];
                        for(int iter = 0 ; iter < columns ; iter++) {
                          columnNames[iter] = cur.getColumnName(iter);
                        }
                        while(next) {
                            Row currentRow = cur.getRow();
                            String[] currentRowArray = new String[columns];
                            for(int iter = 0 ; iter < columns ; iter++) {
                                currentRowArray[iter] = currentRow.getString(iter);
                            }
                            data.add(currentRowArray);
                            next = cur.next();
                        }
                        Object[][] arr = new Object[data.size()][];
                        data.toArray(arr);
                        hi.add(BorderLayout.CENTER, new Table(new DefaultTableModel(columnNames, arr)));
                    } else {
                        hi.add(BorderLayout.CENTER, "Query returned no results");
                    }
                } else {
                    hi.add(BorderLayout.CENTER, "Query returned no results");
                }
            } else {
                db.execute(query.getText());
                hi.add(BorderLayout.CENTER, "Query completed successfully");
            }
            hi.revalidate();
        } catch(IOException err) {
            Log.e(err);
            hi.removeAll();
            hi.add(BorderLayout.CENTER, "Error: " + err);
            hi.revalidate();
        } finally {
            Util.cleanup(db);
            Util.cleanup(cur);
        }
    }
});
hi.show();

  
  
  
  
  
  
  
  
  }    
      
   private void Login(){
   Style s = UIManager.getInstance().getComponentStyle("");
    FontImage icon = FontImage.createMaterial(FontImage.MATERIAL_SD_CARD, s);
   Form login=new Form("Login ",new BoxLayout(BoxLayout.Y_AXIS));
   login.getToolbar().addCommandToOverflowMenu("signup", icon, e->{
   Label id=new Label("Enter Your ID");
   TextField Uid=new TextField("");
   
   Label password=new Label("Enter Your Password");
    Label pword=new Label("Enter Your Password");
     Label psword=new Label("Enter Your Password");
      Label pswrd=new Label("Enter Your Password");
       Label pwrd=new Label("Enter Your Password");
        Label pd=new Label("Enter Your Password");
         Label pord=new Label("Enter Your Password"); 
         Label pssword=new Label("Enter Your Password");
          Label pwd=new Label("Enter Your Password");
           Label pswor=new Label("Enter Your Password");
         
   TextField Password=new TextField();
   
   Password.setConstraint(TextArea.PASSWORD);
   Button singin=new Button("sign in");
   singin.addActionListener((lambda)->{
   
   MainForm();
   lambda.consume();
   
   });
   login.removeAll();
   login.add(id);
   login.add(Uid);
   login.add(password);
   login.add(Password);
   login.add(singin);
   login.revalidate();
   e.consume();
   
   });
   login.getToolbar().addCommandToLeftBar("Login", icon, e->{
   
   Label id=new Label("Enter Your ID");
   TextField Uid=new TextField("");
   
   Label password=new Label("Enter Your Password");
   
   TextField Password=new TextField("Password");
   
   Password.setConstraint(TextArea.PASSWORD);
   login.removeAll();
   login.add(id);
   login.add(Uid);
   login.add(password);
   login.add(Password);
   login.revalidate();
   });
   
   login.show();
   
   } 
    
  public void MainForm(){
  
  Form MainForm =new Form("Digital Student Card",new BoxLayout(BoxLayout.Y_AXIS));
  
  Button btn=new Button("AddStudent");
  Button show=new Button("show");
  Button delete=new Button("delete from table");
  
  Button table=new Button("Table Layout");
  
  table.addActionListener(e->{
  
  TableLayoutDemo object=new TableLayoutDemo();
  
  object.showForm();
  
  });
  
  
  
  
  delete.addActionListener(e->{
  
  DatabaseSQLite object=new DatabaseSQLite();
  object.DeleteStudents();
      
  
  });
  
  show.addActionListener(e->{
  
  showDatabase();
  
  
  });
  btn.addActionListener(e->{
 
 StudentClass object=new StudentClass();     
      object.AddStudentForm();
 e.consume();
  });
  
  
  Button btn2=new Button("Welcome");
  btn2.addActionListener(e->{
  HelloWorldForm();
 e.consume();
  });
 
  Button three=new Button("create Db");
  
  three.addActionListener(e->{
  
  //CreateDatbase();
  
e.consume();
  
  });
  
  
  
  MainForm.addComponent(btn);
  MainForm.addComponent(btn2);
 MainForm.addComponent(three);
 MainForm.addComponent(show);
 MainForm.addComponent(delete); 
 MainForm.addComponent(table);
 MainForm.show();
  
  
  }  
     
public void HelloWorldForm(){


Form HelloWorld=new Form("Hello world"); 
      
 Button Back =new Button("Back");

 Back.addActionListener(e->{
 
     
     MainForm();
     e.consume();
 
 
 });
 
 Label WelcomeNote=new Label("Welcome to My First IOS APP");
 HelloWorld.add(WelcomeNote);
 HelloWorld.add(Back);
 
 
 HelloWorld.show();



}  
  
  
  
  
  
  
  
    public void init(Object context) {
        theme = UIManager.initFirstTheme("/theme");

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);
 
         
         String path = Display.getInstance().getDatabasePath("students.db");
        if(path != null && !FileSystemStorage.getInstance().exists(path)) {
            copyDb(path);
        
        }  // Pro only feature, uncomment if you have a pro subscription
        // Log.bindCrashProtection(true);
    }
    
    private void copyDb(String path) {
        try(InputStream i = Display.getInstance().getResourceAsStream(getClass(), "/students.db");
                OutputStream o = FileSystemStorage.getInstance().openOutputStream(path)) {
            Util.copy(i, o);
        } catch(IOException err) {
            Log.e(err);
        }
    }
    
    public void start() {
        
        if(current != null){
            current.show();
            return;
        }
        
      
       // MainForm();
      //  Login();
     TableLayoutDemo object=new TableLayoutDemo();
  
  object.showForm();
     
    }

    public void stop() {
        current = Display.getInstance().getCurrent();
        if(current instanceof Dialog) {
            ((Dialog)current).dispose();
            current = Display.getInstance().getCurrent();
        }
    }
    
    public void destroy() {
    }

}
